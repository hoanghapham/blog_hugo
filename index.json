[{"content":"If you are familiar with the modern data stack, probably dbt is no stranger. dbt tries to bring the best practices from the software engineering world into data development, and one of such practices is the idea of automated testing and continuous integration (CI).\nWhile dbt Cloud provides a \u0026ldquo;slim CI\u0026rdquo; feature that satisfies most basic needs, you will have more control over your CI jobs if you make use of your git provider\u0026rsquo;s CI/CD functions. In this project, we will look at how to create a dbt CI job using GitHub Actions\nThe demo project can be found here: https://github.com/hoanghapham/dbt_ci_demo\nWhat is GitHub Action? GitHub Actions is GitHub\u0026rsquo;s tool to schedule \u0026amp; execute software development workflows right within your GitHub repository. The workflows are configured using YAML files placing in the .github/workflows folder.\nIf you are not familiar with the tool, it is best to start with GitHub\u0026rsquo;s documentation first. This tutorial will assume that you have already grasped the basic concepts of GitHub Actions.\nPreparation   Required dbt version: 0.21.0 or above (As of this writing\u0026rsquo;s date, v0.21.0 is the latest version). dbt 0.21 has introduced the powerful dbt build command that you should definitely use.\n  dbt project setup: dbt stores information about database connections in the profiles.yml file. In this tutorial, we will place the file in a test_profiles folder.\n  Database: In this tutorial, I will use a free Google BigQuery account. You can easily register for one yourself following this instruction. If you decide to use BigQuery, you will also need to create a Service Account, and download the key following this instruction.\n  Actions secrets: Important information like credentials, passwords, access tokens\u0026hellip; must not be committed to the repository. Instead, you can set them up as Action secrets.\n  With that out of the way, let\u0026rsquo;s dive in.\nRun a workflow upon PR creation First, let\u0026rsquo;s configure a job to run upon a new PR against the main branch.In general, the workflow will need to have the following steps:\n Check out the code branch you have just pushed Read the database credentials from the repository\u0026rsquo;s secret Install dbt to the GitHub action runner, as well as necessary packages Build \u0026amp; test dbt models Archive the compiled SQLs for debugging purpose  Suppose that our profiles.yml has a ci target like so:\ndemo_ci: target: ci outputs: ci: type: bigquery method: service-account project: \u0026#34;{{ env_var(\u0026#39;DBT_CI_BIGQUERY_PROJECT_ID\u0026#39;) }}\u0026#34; dataset: dbt_ci keyfile: ./test_profiles/cred.json threads: 4 timeout_seconds: 300 priority: interactive Our basic workflow will look like this:\nname: CI testing - Full run - No container on: [pull_request] # Run this workflow when there is a new PR jobs: ci-full-run-no-container: runs-on: ubuntu-latest env: DBT_PROFILES_DIR: ./test_profiles # Tell dbt to look for profiles in this folder DBT_CI_BIGQUERY_PROJECT_ID: ${{ secrets.DBT_CI_BIGQUERY_PROJECT_ID }} # Make the BigQuery project ID available as an env var steps: - name: Check out ${{ github.head_ref }} uses: actions/checkout@v2 - name: Read Bigquery credentials from repo secret shell: bash env: DBT_CI_BIGQUERY_CRED: ${{ secrets.DBT_CI_BIGQUERY_CRED }} run: |mkdir -p ./test_profiles; echo $DBT_CI_BIGQUERY_CRED | base64 -d -i \u0026gt; ./test_profiles/cred.json # Need to install dbt into the runner - name: Install dbt \u0026amp; packages shell: bash run: |pip3 install dbt==0.21.0; dbt deps; - name: Build \u0026amp; test models shell: bash run: dbt build  # Upload compiled SQL as artifacts - name: Archive compiled SQL if: ${{ always() }} uses: actions/upload-artifact@v2 with: name: compiled_sql path: ./target/compiled A few notes:\n  After the job finishes running, the runner will be destroyed. All resources created in the runner (checked-out codes, new files created\u0026hellip;) will also be destroyed, unless you upload them as artifacts.\n  In the Read credential step, since I encoded my credentials using base64 before adding it into the secrets, I needed to decode it before putting it into a cred.json file.\n  In the final step (Archive compiled SQL), the if: ${{ always() }} expression ensures this step will always run, even when the previous dbt build step fails (because of a failed test, or an invalid dbt run). This step will make the compiled SQL available to you after the job finished running.\n  After merging this workflow, whenever you make a new PR against your main branch, the workflow will be triggered. The GitHub UI will show you which workflows are running, just like when you enable Slim CI in dbt.\nIncremental testing workflow The problem with the workflow above is that, even when you only modify one model, the whole project will be rebuilt when you invoke dbt build. This can result in an expensive (as in, cost you more BigQuery money) and slow-running workflow.\nTo avoid this, you can use dbt\u0026rsquo;s state and defer feature to compare your current project with a previous state, and only run the new and modified models.\nThe state of a dbt project is reflected in the manifest.json file. When you run some dbt commands (like compile, run, test\u0026hellip;) this file will be generated into the target folder. By default, this folder is ignored and not pushed to GitHub, so we need to make this file available in the action runner.\nThere are a few approaches, each of which has its own pros and cons:\n Manually commit the manifest.json file Generate the manifest.json file at run time Have an automated workflow to generate and commit the manifest.json file  After having the manifest file available, you can change the dbt build step into\ndbt build --select state:modified --defer --state folder-with-manifest-file/ Let\u0026rsquo;s go into the details of the approaches below.\nManually commit the manifest file You can either:\n  Add !target/manifest.json into the .gitignore file so that everything in the target folder will be ignored except the manifest.json file. This way, every time you run a dbt command and the state of your project changes, you can commit that change.\nThis is also the drawback of this approach, since during model development, it is unnecessary to commit all the tiny changes. In the GitHub Actions workflow, you will also need a step to copy the manifest file to a different location other than the target folder before running a new dbt command.\n  Or, manually copy the manifest.json file to a different location only when necessary. This way you have better control of which state to retain, but of course, you have to remember to do it every time you push something new to your repository.\n  The advantage of this approach is that it is the easiest to do. However, it is quite cumbersome, and is definitely not cool. We are here to do cool stuff, so let\u0026rsquo;s automate this process.\nAutomatically generate manifest file at run time One way to have the manifest file reflecting the old project state is to generate it directly from your main branch. Here\u0026rsquo;s the workflow to do so:\nname: CI testing - Incremental run - Checkout master on: [pull_request] jobs: ci-incr-run-checkout-master: runs-on: ubuntu-latest env: DBT_PROFILES_DIR: ./test_profiles DBT_CI_BIGQUERY_PROJECT_ID: ${{ secrets.DBT_CI_BIGQUERY_PROJECT_ID }} steps: - name: Check out ${{ github.head_ref }} uses: actions/checkout@v2 # Check out master branch to a different folder - name: Checkout master uses: actions/checkout@v2 with: ref: master path: master_branch/ # Should also copy the credential into the master_branch folder - name: Read Bigquery credentials from secret shell: bash env: DBT_CI_BIGQUERY_CRED: ${{ secrets.DBT_CI_BIGQUERY_CRED }} run: |mkdir -p ./test_profiles; echo $DBT_CI_BIGQUERY_CRED | base64 -d -i \u0026gt; ./test_profiles/cred.json; echo $DBT_CI_BIGQUERY_CRED | base64 -d -i \u0026gt; ./master_branch/test_profiles/cred.json; - name: Install dbt \u0026amp; packages shell: bash run: |pip3 install dbt==0.21.0; dbt deps; - name: Generate manifest.json from master shell: bash run: dbt compile --project-dir master_branch/ --profiles-dir master_branch/test_profiles/ # Tell dbt to look up previous manifest file in master_branch/target  - name: Build \u0026amp; test models shell: bash run: dbt build --select state:modified --defer --state master_branch/target/ - name: Archive compiled SQL if: ${{ always() }} uses: actions/upload-artifact@v2 with: name: compiled_sql path: ./target/compiled How this workflow is different from the previous one:\n First, we check out the files from our master branch to the master_branch folder within the current project Then, we generate the manifest file from the master branch by running dbt compile, while specifying the project directory as master_branch/. The manifest file will be generated into master_branch/target/ folder. Note that it is necessary to also copy the credential file into the master_branch folder. Finally, run dbt build while pointing to the master_branch/target/ folder for state comparison  As you can see, in the incremental workflow, only the new test_model.sql file is run, while the original full run workflow will run all the files.\nSo we have started to automate the boring stuff! However, this workflow has a drawback. Every time you push something new to an opened PR, the whole checkout and generate manifest steps will have to run again.\nThis may be OK if your project is small, but it may cost you more job run time if your project has hundreds of models.\nWe can certainly flex further and look for a way to reuse this manifest file.\nGenerate manifest file when merging to main branch During model development, it is unlikely that the manifest file will change that much. We would want to reuse this manifest file, but GitHub Actions does not allow sharing files between different job runs.\nWe can work around this with workflow that update the manifest file when you merge a new PR. This is the workflow that do so:\nname: Update dbt project state on: pull_request: types: [closed] workflow_dispatch: jobs: update-project-state: if: github.event.pull_request.merged == true runs-on: ubuntu-latest env: DBT_PROFILES_DIR: ./test_profiles DBT_CI_BIGQUERY_PROJECT_ID: ${{ secrets.DBT_CI_BIGQUERY_PROJECT_ID }} steps: - name: Checkout master uses: actions/checkout@v2 with: ref: master - name: Read Bigquery credentials from secret shell: bash env: DBT_CI_BIGQUERY_CRED: ${{ secrets.DBT_CI_BIGQUERY_CRED }} run: |mkdir -p ./test_profiles; echo $DBT_CI_BIGQUERY_CRED | base64 -d -i \u0026gt; ./test_profiles/cred.json; - name: Install dbt \u0026amp; packages shell: bash run: |pip3 install dbt==0.21.0; dbt deps; - name: Generate manifest.json from master shell: bash run: |dbt deps; dbt compile --no-version-check; mkdir -p ./current_state; cp ./target/manifest.json ./current_state/manifest.json; - name: Commit new manifest.json file uses: EndBug/add-and-commit@v7.4.0 with: add: \u0026#39;./current_state/manifest.json\u0026#39; message: \u0026#39;manifest.json updated\u0026#39; push: true branch: master This part:\non: pull_request: types: [closed] workflow_dispatch: jobs: update-project-state: if: github.event.pull_request.merged == true runs-on: ubuntu-latest specifies the types of events that will trigger this workflow.\n  pull_request: This workflow will run when you merge a PR to the master branch (defined with the if expression).\n  workflow_dispatch: This means that you can also manually trigger this workflow from GitHub Action\u0026rsquo;s UI.\n  After this, in the main CI workflow you can remove the \u0026ldquo;Checkout master\u0026rdquo; and \u0026ldquo;Generate manifest file from master\u0026rdquo; steps. Since we now have the manifest.json file in the current_state folder, when running dbt build you need to point to this folder for state comparison.\ndbt build --select state:modified --defer --state current_state/ Bonus: Run jobs inside a container In the workflows above, we have a step to install dbt into the runner:\npip3 install dbt==0.21.0 You can also run dbt using dbt Labs' official Docker image so you won\u0026rsquo;t need to worry about dependencies. Simply add the container and image properties to the job config:\njobs: ci-incr-run: runs-on: ubuntu-latest container: image: fishtownanalytics/dbt:0.21.0 Now you can remove the pip3 install dbt==0.21.0\nConclusion Hope that this demonstration can help others who are trying to improve their dbt workflow. If you have any comments or questions, please create an issue in this repo: https://github.com/hoanghapham/dbt_ci_demo.\n","permalink":"http://hoanghapham.github.io/posts/dbt-ci-with-github-actions/","summary":"If you are familiar with the modern data stack, probably dbt is no stranger. dbt tries to bring the best practices from the software engineering world into data development, and one of such practices is the idea of automated testing and continuous integration (CI).\nWhile dbt Cloud provides a \u0026ldquo;slim CI\u0026rdquo; feature that satisfies most basic needs, you will have more control over your CI jobs if you make use of your git provider\u0026rsquo;s CI/CD functions.","title":"How to run dbt CI with GitHub Action"},{"content":"History as taught in Vietnam schools is boring. Modern war history is even more boring, because of the very unattractive way textbooks present the narrative of war. We were taught that our army is brave, noble and great, and we had impossible feats considering the size and technology level of our country. However, I am always skeptical about all those teachings. History as told by only one side is never complete, and I want to know what “the other side” can tell me about the war.\nIn this two-part series, I use the THOR (Theater History of Operations Reports) dataset to explore the bombing history of my country. This dataset, which was painstakingly compiled by Lt. Col. Jenns Robertson in more than 8 years, contains the last 70–100 years of bombing data. The database has already proved useful in finding unexploded bombs in South East Asia.\nIn this first part, I will provide an overall narrative of the war because this is also something that I like to know. No in-depth analysis is involved.\nData Description For the full dataset, you can follow the link above to download. You can find my data cleaning \u0026amp; reporting code here: https://github.com/hoanghapham/vietnam_war_bombing\nThe original data set consists of 4,8 million rows describing each run. As defined in the data dictionary, one aircraft delivering a particular weapon or strike a particular target will generate a new record. The data contains information about sorties like: operation supported, mission type, aircraft used, weapon (bomb) used, military services carrying out the mission, target coordinate, tonnage of weapons delivered…\nThe data is compiled from paper reports, so it is expected to have problems — in other words, the data is not “clean”. Some problems:\n  Duplicated sorties: the data is compiled from many sources, and there are cases where the data is updated. It is unavoidable to have duplicated records.\n  Non standardized operation / mission naming: great efforts have been spent to standardize the mission names and fix typos. However, this is just me doing it and I have little history and military knowledge, so I’m not sure if I fixed them correctly.\n  Incomplete data: As of the time of this writing, no data prior to September 30th 1965 were included. The data structure is still a work in progress, and this introduces another problem to the analysis, as there are columns that I cannot understand their meanings.\n  Definition of some terms:\n Strike: correspond to one row in the dataset. If the same aircraft carrying the same weapons but attacked two targets, this will be counted as two strikes Operation: The OPERATION_SUPPORTED field in the dataset is quite messy. It seems that the operation names are comprised of the name of the whole operation and the number assigned to identify the missions.  Why the war happened at all? The official time span of the war is 1955–1975, but the root of it started a bit further. France’s rule in Vietnam lasted for about 60 years from 1887 and ended with Vietnam’s proclamation of independence in 1945. However, France did not accept Vietnam’s independence, so between 1945 - 1954 they tried to reestablish themselves to no avail. It was in this period that the U.S. got involved in Indochina affairs.\nDuring Japan\u0026rsquo;s occupation of French Indochina in WWII, Viet Minh was established in 1941 as an organized resistance group seeking to free Vietnam. Along with fighting France, Viet Minh also opposed Japan, so it received supports from the U.S., Soviet Union and China. After Japan’s surrender in 1945, Viet Minh fought against France to protect Vietnam’s new-found freedom.\nIn 1949, France established the State of Vietnam under the nominal rule of King Bao Dai in the south, rearing it to be an opposition force against communist North Vietnam. At the same period, Domino Theory was popular in the West and stated that “if one country in a region came under the influence of communism, then the surrounding countries would follow in a domino effect”1. The U.S. saw Viet Minh’s affiliation with communist ideas as a great danger, thus gradually turning their support to France. Even after France’s defeat in 1954, they still fixated on the idea that South Vietnam should not be a communist state.\nBelieving that Ngo Dinh Diem has the potential to drive Viet Minh away from the South, the U.S. supporting him overthrow Bao Dai’s government and provided him with military services. From this moment it turned out that the U.S. drew the short straw. South Vietnam’s government was reported to be “corrupted and unpopular”, and is a difficult state to support. No matter how many “advisors” were sent to train South Vietnam’s forces, they could not defeat Viet Cong.\nFinally, after the infamous Tonkin Gulf incident in 1964, the U.S.’s moved to an actively offensive stance in South East Asia.\nVienam war period 1965–1973 I used the article Vietnam War: Escalation and Withdrawal through rare photographs, 1968-1975 as the basis to conduct my investigation, meaning I will go through main ideas and demonstrate it using data.\nSome general statistics of Vietnam war’s bombing from end of 1965 to 1975:\n Number of operations: 639 Number of aircraft type used: 190 Number of weapons type used: 293 Countries targeted: North Vietnam, South Vietnam, Thailand, Laos, Cambodia, Phillipines and some West Pacific locations Total tonage of bombing was 7,255,140 tons while the whole tonnage of U.S. bombing in World War II was roughly 2,057,244 — three times less than that in Vietnam.  We can have an overview of the U.S.’s escalation and withdrawal in Vietnam by looking at the number of air strikes throughout the years.\n1965–1968: bloody years, and the beginning of peace talk U.S.’s involvement increased gradually from 1965 and topped in 1968. This is a bloody year for both sides of the war, and is considered the transition from the “idealism” of the 1960s and the “disillusionment” of the 1970s. Due to Tet Offensive, U.S. press and public started to “challenge the Johnson administration’s assurances of success and to question the value of the increasingly costly war.”2\nThe graph below shows lessened air force activities after 1968, with another come bank in 1972 when peace negotiations broke down. We will come back to this year later, as it is a very interesting period to look into.\nData of U.S. force’s fatality in Vietnam War further cement this fact. In 1968 about 16,000 U.S. soldiers were reportedly deceased (in the article, this number is 14,000). The number decreased gradually in the after years.\nIn March 1968, Johnson decided that U.S.’ effort in Vietnam could no longer be justified. After being requested 200,000 more men, he consulted with his new secretary of defense and outside advisors and decided that a limit had been reached. Johnson authorized only 13,500 more and informed Thieu and Ky that South Vietnam will “have to carry more of the fighting”. This later results in what was called “Vietnamization” of the war.\nIn general, the U.S. Air Force is the main actor. Other main military services took part included U.S. Navy, Marine Corps and (South) Vietnam Air Force.\nThere were other air forces from Laos, Australia, Khmer and U.S. Army, but their roles are not significant.\nOver the years U.S. forces still hold the main responsibility to carry out air strikes. However, after 1968 U.S. forces’ activities lessened and VNAF carried more runs.\nNext we will look at the bombing target maps across the years, as it also reflects the changes of the U.S.\u0026rsquo;s war policy.\nWe can clearly see the North was bombed quite heavily throughout 1965–1967, as well as on the famous Ho Chi Minh Trail.\nOn 31st March 1968 Johnson announced on TV that the United States would “restrict bombing of North Vietnam” and pursue negotiation with Hanoi. We can see that bombing in the north lessened in 1968 and stopped in 1969–1970.\n1969–1972: stagnant in negotiation and miscommunications In 1969, Nixon became president with a promise to end the war. He ordered more and more U.S. soldiers to withdraw, and tried to push Vietnamization strategy but saw little progress.\nHowever, facing political pressure at home and the army’s dissatisfaction in the front, starting from 1970 Nixon sent U.S. troops to the neutral Cambodia, as this had been considered the “sanctuary” of Viet Cong and North Vietnam Army that the U.S. dared not to touch.\nIn 1971, to further support Vietnamization, heavy air attacks rained down on communist supply lines in Laos and Cambodia. We can clearly see bombing targets shifted to Cambodia and Laos, as well as area around 17th parallel.\nIn 1972 U.S. bombed Hanoi and Hai Phong again. This is the year of “Christmas bombing”, which is a series of bombings which was considered “heaviest in the war to date.” The reasons for this escalation is multi-layered, and as far as I understand, this is a huge confusing mess. After some research, here is my synopsis of the situation then.\nNorth Vietnam and the U.S. had been in secret peace negotiations since 1968 but had several deadlocks. For three years, North Vietnam maintained their requirement that the U.S. needed to bring Thieu down and replace him with someone more “acceptable” in the North’s point of view. At the same time, the U.S. demanded North Vietnam Army to withdraw completely from the South. In 1972, Le Duc Tho and Henry Kissinger in Paris finally made progress in the negotiation. The U.S. accepted a cease-fire as a precondition for its withdrawal without requiring the North to do the same.\nHowever, the situation quickly became chaotic as this agreement was made without the knowledge of Nguyen Van Thieu. When Thieu was presented with the draft of that agreement, he was furious and refused to accept it. On October 24th 1972, Thieu made a broadcast “emphasized that the South Vietnamese could not agree to the Communist proposal for ceasefire in place before a political settlement.” Because of this, Hanoi believed they were deceived by Kissinger. On October 26th 1972 they also broadcasted the key details of the agreement made with the U.S.\nAt the moment Nixon was facing major pressure to bring the war to an end. He pressed Thieu to accept the agreement even though his demands would not been met. Nixon assured to provide South Vietnam supports in case the North attacks, and to demonstrate his seriousness, Nixon ordered operation Linebacker II to bomb Hanoi and Hai Phong from December 18th to 30th (thus the name “Christmas Bombing”). The purpose of this move is also to force Hanoi to stay at the table — meaning to prevent Hanoi from abandoning negotiation and seek total victory.\nDuring this operation, the U.S. also suffered the heaviest B-52 loss in the war.\nAt around Christmas (Dec 25th — 26th) Hanoi proposed a resumption of peace talk on January 8th, and U.S. bombings completely stopped on Dec 30th. However, the motive of the bombing halt is reported differently Hanoi — it claimed that this was a victory over the U.S., and the U.S. withdrew due to the loss inflicted by North Vietnam’s Army. In either way, I still think that this ceasefire can be considered a victory for Vietnamese people. In this Linebacker II operation alone, they already lost too much.\nIn this map we clearly see bombing activities intensified in Hanoi and Haiphong again.\nLet’s do a quick recap by putting all maps into a GIF image:\nIn 1973, the U.S. stopped bombing the North completely as peace talk with Vietnam in Paris achieved breakthroughs. The rest of the story is basically what you have known: on April 30th 1975 the liberation army occupied the Independence Palace, and:\n“the last remaining Americans abandoned the U.S. embassy in Saigon in a dramatic rooftop evacuation by helicopters.”1\nConclusion War story has never been a pretty one. Digging through articles to make this presentation is like opening a can of worms that can eat your souls. However, I did learn a lot about this war by digging through this data set instead of doing pure reading.\nIn the next post in the series, we will take a deeper look at Operation Rolling Thunder, one of the most important operations in this war.\n References  https://wikieducator.org/images/8/8b/VIETNAM_WAR_BACKGROUND.pdf https://www.airuniversity.af.mil/News/Article/704552/historic-airpower-database-now-online/ https://www.u-s-history.com/pages/h1888.html https://en.wikipedia.org/wiki/Operation_Rolling_Thunder https://en.wikipedia.org/wiki/Ho_Chi_Minh_trail https://www.nytimes.com/1972/10/25/archives/speech-in-saigon-ceasefire-obstacles-seen-but-president-expects.html    Domino Theory\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Vietnam War: Escalation and Withdrawal through rare photographs, 1968-1975\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"http://hoanghapham.github.io/posts/vietnam-bombing-history-p1/","summary":"History as taught in Vietnam schools is boring. Modern war history is even more boring, because of the very unattractive way textbooks present the narrative of war. We were taught that our army is brave, noble and great, and we had impossible feats considering the size and technology level of our country. However, I am always skeptical about all those teachings. History as told by only one side is never complete, and I want to know what “the other side” can tell me about the war.","title":"Vietnam bombing history with data - Part 1"}]